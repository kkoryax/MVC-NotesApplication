@model List<NoteFeature_App.Models.Note.NoteModel>
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@

@if (Model.Any() && Model.Count() > 0)
{
    @foreach (var note in Model)
    {
        <div class="col-12 col-sm-6 col-md-6 col-xl-4 position-relative">
            <div class="card shadow-sm border-2 note-card" style="height: 235px; width: auto;">
                @if (note.FlagActive && note.IsPublic && note.ActiveUntil != null)
                {
                    <div class="position-absolute px-2 py-1 bg-danger text-white rounded"
                    style="top: -10px; right: -10px; z-index: 10;">
                        <strong class="user-select-none" style="font-size: 0.8rem;">
                            @note.GetTimeLeftDisplay()
                        </strong>
                    </div>
                }
                @if (note.FlagActive && !note.IsPublic &&
                        (!note.ActiveUntil.HasValue || note.ActiveUntil >= DateTime.Now))
                {
                    <div class="position-absolute px-2 py-1 bg-secondary text-white rounded"
                         style="top: -10px; right: -10px; z-index: 10;">
                        <strong class="user-select-none" style="font-size: 0.8rem;">
                            Unpublish
                        </strong>
                    </div>
                }
                <div class="card-body d-flex flex-column p-4 flex-nowrap">
                    <h5 class="card-title mb-2 user-select-none text-truncate">
                        @if (note.IsPinned == true)
                        {
                            <i class="bi bi-pin-angle-fill text-danger"></i>
                        }
                        <i class="bi bi-sticky text-warning"></i>
                        @note.NoteTitle
                        <small class="text-muted">
                            @if (note.UpdatedAt != null)
                            {
                                <span class="badge bg-secondary">edit</span>
                            }
                        </small>
                    </h5>
                    <p class="card-text user-select-none" style="text-truncated; line-height: 1.4; min-height: 4em;">@note.NoteContent</p>
                    <div class="mt-auto">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                            <div class="d-flex flex-column">
                                <small class="text-muted user-select-none text-truncate">
                                    <i class="bi bi-calendar3"></i>
                                    @if (note.ActiveFrom != note.CreatedAt)
                                    {
                                        @note.ActiveFrom.ToString("yyyy-MM-dd HH:mm")
                                    } else {
                                        @note.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                                    } 
                                </small>
                                <small class="text-muted user-select-none text-truncate">
                                    <i class="bi bi-person"></i> @note.CreatedByUser?.Email
                                </small>
                                <small class="text-muted">
                                    @if (note.NoteFiles != null && note.NoteFiles.Any(f => f.FlagActive))
                                    {
                                        <i class="bi bi-paperclip"></i>
                            
                                        <small class="user-select-none">@note.NoteFiles.Count(f => f.FlagActive) file attachment</small>
                                    }
                                </small>
                            </div>
                            <div class="d-flex gap-1">
                                <button type="button" class="btn btn-outline-primary btn-sm detail-btn"
                                        data-note-id="@note.NoteId" data-note-title="@note.NoteTitle">
                                    <i class="bi bi-eye"></i>
                                </button>
                                @{
                                    var currentUserId = ViewBag.CurrentUserId?.ToString();
                                    var isAdmin = ViewBag.IsAdmin;
                                    var isUser = ViewBag.IsUser;
                                    var isOwner = note.CreatedByUserId.ToString() == currentUserId;
                                    bool canDelete = isAdmin || isOwner;
                                    var canSeeDeleteButton = isAdmin || isUser;
                                }
                                @if (canSeeDeleteButton)
                                {
                                    <button type="button" class="btn btn-outline-danger btn-sm delete-btn"
                                            data-note-id="@note.NoteId" data-note-title="@note.NoteTitle" data-can-delete="@canDelete.ToString().ToLower()" title="Delete">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
} else {
    <div>
        <p class="text-center text-muted user-select-none">No notes available.</p>
    </div>
}
